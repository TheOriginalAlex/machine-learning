#!/usr/bin/env python
import helper
import matplotlib.pyplot as plt
import numpy as np
import theano
import theano.tensor as T

from sklearn.datasets import make_moons

# Generate a dataset and plot it
np.random.seed(0)
X, y = make_moons(1000, noise=0.2)
c = np.c_[X, y]
np.random.shuffle(c)
X, y = c[:, :2], np.array(c[:, 2], dtype=int)
Xtrain, Xtest = X[:800, :], X[800:, :]
ytrain, ytest = y[:800], y[800:]

# Our data vectors
Xvec = T.matrix('X') # matrix of doubles
yvec = T.lvector('y') # vector of int64

nn_input_dim = 2
nn_output_dim = 2
nn_hdim = 5
num_examples = len(Xtrain)
reg_lambda = 0.01
learn_rate = 0.01

# Shared variables with initial values. We need to learn these.
W1 = theano.shared(np.random.randn(nn_input_dim, nn_hdim), name='W1')
b1 = theano.shared(np.zeros(nn_hdim), name='b1')
W2 = theano.shared(np.random.randn(nn_hdim, nn_output_dim), name='W2')
b2 = theano.shared(np.zeros(nn_output_dim), name='b2')

# Forward propagation
# Note: We are just defining the expressions, nothing is evaluated here!
z1 = Xvec.dot(W1) + b1
a1 = T.tanh(z1)
z2 = a1.dot(W2) + b2
y_hat = T.nnet.softmax(z2) # output probabilties

# The regularization term (optional)
loss_reg = 1./num_examples * reg_lambda/2 * (T.sum(T.sqr(W1)) + T.sum(T.sqr(W2)))
# the loss function we want to optimize
loss = T.nnet.categorical_crossentropy(y_hat, yvec).mean() + loss_reg

# Returns a class prediction
prediction = T.argmax(y_hat, axis=1)

forward_prop = theano.function([Xvec], y_hat)
calculate_loss = theano.function([Xvec, yvec], loss)
predict = theano.function([Xvec], prediction)

dW2 = T.grad(loss, W2)
db2 = T.grad(loss, b2)
dW1 = T.grad(loss, W1)
db1 = T.grad(loss, b1)

gradient_step = theano.function(
    [Xvec, yvec],
    updates=((W2, W2 - learn_rate * dW2),
             (W1, W1 - learn_rate * dW1),
             (b2, b2 - learn_rate * db2),
             (b1, b1 - learn_rate * db1)))

def build_model(num_passes=20000, print_loss=False):

    # Re-Initialize the parameters to random values. We need to learn these.
    # (Needed in case we call this function multiple times)
    np.random.seed(0)
    W1.set_value(np.random.randn(nn_input_dim, nn_hdim) / np.sqrt(nn_input_dim))
    b1.set_value(np.zeros(nn_hdim))
    W2.set_value(np.random.randn(nn_hdim, nn_output_dim) / np.sqrt(nn_hdim))
    b2.set_value(np.zeros(nn_output_dim))

    # Gradient descent. For each batch...
    for i in xrange(0, num_passes):
        # This will update our parameters W2, b2, W1 and b1!
        gradient_step(Xtrain, ytrain)

        # Optionally print the loss.
        # This is expensive because it uses the whole dataset, so we don't want to do it too often.
        if print_loss and i % 1000 == 0:
            print "Loss after iteration %i: %f" %(i, calculate_loss(Xtrain, ytrain))

# Build a model with a 3-dimensional hidden layer
build_model(print_loss=True)

# Plot the decision boundary
model = {"W1": W1.get_value(), "b1": b1.get_value(), "W2": W2.get_value(), "b2": b2.get_value()}
p = helper.predict(model, Xtest)
print("Percent of correct test data: %.2f%%" % ((ytest[np.where(p==ytest)].size/float(ytest.size))*100.))
helper.plot_decision_boundary(lambda x: helper.predict(model, x), X, y)
plt.title("Decision Boundary for hidden layer size 3")
plt.show()
